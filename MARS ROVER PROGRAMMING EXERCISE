# Command Pattern
class Command:
    def execute(self, rover):
        pass

class MoveCommand(Command):
    def execute(self, rover):
        rover.move()

class TurnLeftCommand(Command):
    def execute(self, rover):
        rover.turn_left()

class TurnRightCommand(Command):
    def execute(self, rover):
        rover.turn_right()

# Rover class
class Rover:
    def __init__(self, x, y, direction):
        self.x = x
        self.y = y
        self.direction = direction

    def move(self):
        # Implement movement logic, considering obstacles and boundaries
        if self.direction == 'N' and self.y < 10:
            self.y += 1
        elif self.direction == 'S' and self.y > 0:
            self.y -= 1
        elif self.direction == 'E' and self.x < 10:
            self.x += 1
        elif self.direction == 'W' and self.x > 0:
            self.x -= 1

    def turn_left(self):
        # Implement turn left logic
        directions = {'N': 'W', 'W': 'S', 'S': 'E', 'E': 'N'}
        self.direction = directions[self.direction]

    def turn_right(self):
        # Implement turn right logic
        directions = {'N': 'E', 'E': 'S', 'S': 'W', 'W': 'N'}
        self.direction = directions[self.direction]

    def send_status_report(self):
        # Implement status report logic
        return f"Rover is at ({self.x}, {self.y}) facing {self.direction}. No Obstacles detected."

# Composite Pattern for grid and obstacles
class GridComponent:
    def add(self, component):
        pass

    def remove(self, component):
        pass

    def is_obstacle(self, x, y):
        pass

class Grid(GridComponent):
    def __init__(self, size_x, size_y):
        self.size_x = size_x
        self.size_y = size_y
        self.obstacles = []

    def add(self, obstacle):
        self.obstacles.append(obstacle)

    def remove(self, obstacle):
        self.obstacles.remove(obstacle)

    def is_obstacle(self, x, y):
        return (x, y) in self.obstacles

# Client code
if __name__ == "__main__":
    # Initialize the Rover and Grid
    rover = Rover(0, 0, 'N')
    grid = Grid(10, 10)
    grid.add((2, 2))
    grid.add((3, 5))

    # Define commands
    commands = [MoveCommand(), MoveCommand(), TurnRightCommand(), MoveCommand(), TurnLeftCommand(), MoveCommand()]

    # Execute commands
    for command in commands:
        command.execute(rover)

    # Check for obstacles and boundaries
    if not grid.is_obstacle(rover.x, rover.y) and 0 <= rover.x < grid.size_x and 0 <= rover.y < grid.size_y:
        print(f"Final Position: ({rover.x}, {rover.y}, {rover.direction})")
        print(rover.send_status_report())
    else:
        print("Rover is blocked by an obstacle or has moved out of bounds.")
