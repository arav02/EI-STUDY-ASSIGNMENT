# Smart Home System
class SmartHomeSystem:
    def __init__(self, devices):
        self.devices = {}
        self.device_factory = ConcreteDeviceFactory()

        for device_info in devices:
            device_id = device_info['id']
            device_type = device_info['type']
            device = self.device_factory.create_device(device_type, device_id)
            self.devices[device_id] = device

    def get_device(self, device_id):
        return self.devices.get(device_id)

    def execute_command(self, command):
        # Sample implementation of the execute_command method
        parts = command.strip('()').split(',')
        device_id = int(parts[0])
        action = parts[1]

        device = self.get_device(device_id)
        if device:
            if action == 'turnOn':
                device.turn_on()
            elif action == 'turnOff':
                device.turn_off()
            else:
                print(f"Invalid action: {action}")
        else:
            print(f"Device with ID {device_id} not found.")

    def send_status_report(self):
        # Sample implementation of the send_status_report method
        status_report = ""
        for device_id, device in self.devices.items():
            if isinstance(device, Light):
                status_report += f"Light {device_id} is {device.status}. "
            elif isinstance(device, Thermostat):
                status_report += f"Thermostat is set to {device.temperature} degrees. "
            elif isinstance(device, DoorLock):
                status_report += f"Door is {device.status}. "
        return status_report

    def get_scheduled_tasks(self):
        # Sample implementation of the get_scheduled_tasks method
        scheduled_tasks = []
        for device_id, device in self.devices.items():
            task = device.get_scheduled_task()
            if task:
                scheduled_tasks.append(task)
        return scheduled_tasks

    def get_automated_triggers(self):
        # Sample implementation of the get_automated_triggers method
        automated_triggers = []
        for device_id, device in self.devices.items():
            trigger = device.get_automated_trigger()
            if trigger:
                automated_triggers.append(trigger)
        return automated_triggers

# Sample implementation for Light class
class Light(DeviceObserver):
    def __init__(self, device_id):
        self.device_id = device_id
        self.status = 'off'
        self.scheduled_task = None
        self.automated_trigger = None

    def turn_on(self):
        self.status = 'on'
        print(f"Light {self.device_id} is On.")

    def turn_off(self):
        self.status = 'off'
        print(f"Light {self.device_id} is Off.")

    def set_schedule(self, time, command):
        self.scheduled_task = {'device': self.device_id, 'time': time, 'command': command}
        print(f"Scheduled task set for Light {self.device_id} at {time}: {command}")

    def add_trigger(self, condition, action):
        self.automated_trigger = {'condition': condition, 'action': action}
        print(f"Automated trigger added for Light {self.device_id}: {condition} => {action}")

    def get_scheduled_task(self):
        return self.scheduled_task

    def get_automated_trigger(self):
        return self.automated_trigger

# Sample implementation for Thermostat class
class Thermostat(DeviceObserver):
    def __init__(self, device_id):
        self.device_id = device_id
        self.temperature = 70
        self.scheduled_task = None
        self.automated_trigger = None

    def set_temperature(self, temperature):
        self.temperature = temperature
        print(f"Thermostat is set to {self.temperature} degrees.")

    def set_schedule(self, time, command):
        self.scheduled_task = {'device': self.device_id, 'time': time, 'command': command}
        print(f"Scheduled task set for Thermostat {self.device_id} at {time}: {command}")

    def add_trigger(self, condition, action):
        self.automated_trigger = {'condition': condition, 'action': action}
        print(f"Automated trigger added for Thermostat {self.device_id}: {condition} => {action}")

    def get_scheduled_task(self):
        return self.scheduled_task

    def get_automated_trigger(self):
        return self.automated_trigger

# Sample implementation for DoorLock class
class DoorLock(DeviceObserver):
    def __init__(self, device_id):
        self.device_id = device_id
        self.status = 'locked'
        self.scheduled_task = None
        self.automated_trigger = None

    def unlock(self):
        self.status = 'unlocked'
        print(f"Door is Unlocked.")

    def lock(self):
        self.status = 'locked'
        print(f"Door is Locked.")

    def set_schedule(self, time, command):
        self.scheduled_task = {'device': self.device_id, 'time': time, 'command': command}
        print(f"Scheduled task set for DoorLock {self.device_id} at {time}: {command}")

    def add_trigger(self, condition, action):
        self.automated_trigger = {'condition': condition, 'action': action}
        print(f"Automated trigger added for DoorLock {self.device_id}: {condition} => {action}")

    def get_scheduled_task(self):
        return self.scheduled_task

    def get_automated_trigger(self):
        return self.automated_trigger

# Sample usage
if __name__ == "__main__":
    # Initialize Smart Home System with devices
    devices_info = [
        {'id': 1, 'type': 'light', 'status': 'off'},
        {'id': 2, 'type': 'thermostat', 'temperature': 70},
        {'id': 3, 'type': 'door', 'status': 'locked'}
    ]

    smart_home_system = SmartHomeSystem(devices_info)

    # Execute commands
    commands = ['turnOn(1)', 'setSchedule(2, "06:00", "Turn On")', 'addTrigger("temperature", ">", 75, "turnOff(1)")']
    for command in commands:
        smart_home_system.execute_command(command)

    # Display status report, scheduled tasks, and automated triggers
    print(smart_home_system.send_status_report())
    print(f"Scheduled Tasks: {smart_home_system.get_scheduled_tasks()}")
    print(f"Automated Triggers: {smart_home_system.get_automated_triggers()}")
